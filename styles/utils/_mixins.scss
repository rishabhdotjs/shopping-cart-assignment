@use 'sass:math';

@function toRem($value) {
  $remValue: math.div($value, 16) + rem;
  @return $remValue;
}

// Font Size mixin
@mixin font-size($fs) {
  // If the breakpoint exists in the map.
  @if map-has-key($fontSizes, $fs) {
    // Get the breakpoint value.
    $fs-value: map-get($fontSizes, $fs);

    // Write the media query.
    font-size: $fs-value;

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid font size: #{$fs}.';
  }
}

//
// Theme aware css
//
// USAGE
// .element {
//   @include theme-aware('background', 'color-background');
// }
//––––––––––––––––––––––––––––––––––––––––––––––––––
@mixin theme-aware($key, $color) {
  @each $theme-name, $theme-color in $themes {
    .theme-#{$theme-name} & {
      #{$key}: map-get(map-get($themes, $theme-name), $color);
    }
  }
}

//
// REM Calculation
//
// USAGE
// .element {
//  @include font-size(32);
// }
//––––––––––––––––––––––––––––––––––––––––––––––––––

@function calculateRem($size) {
  $remSize: math.div($size, 16px);
  @return $remSize * 1rem;
}

@mixin get-REM($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

//
//  MEDIA QUERIES
//
//  USAGE
//  @include respond-below(sm) {
//  .element {
//    font-weight: bold;
//  }
// }
//  @include respond-between(sm, md) {
//  .element {
//    font-weight: bold;
//  }
// }
//
//––––––––––––––––––––––––––––––––––––––––––––––––––

//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

    // If one or both of the breakpoints don't exist.
  } @else {
    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {
      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {
      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

// transition
@mixin all-transition() {
  transition: all ease 0.3s;
}

@mixin flex-list() {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
}
